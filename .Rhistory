rm(list=ls()); cat("\014") # Clear Workspace and Console
library(tm) # Load the Text Mining package
getwd()
### --- Example 2a:  R Script: Extracting text content from text files and load them as Corpus   ----
loremipsum <- system.file("texts", "loremipsum.txt", package = "tm") # Path to "loremipsum.txt"
ovid <- system.file("texts", "txt", "ovid_1.txt", package = "tm") # Path to "ovid.txt"
Docs.pth <- URISource(sprintf("file://%s", c(loremipsum, ovid))) # Specify Source
corpus.txt<-VCorpus(Docs.pth) # load them as Corpus
inspect(corpus.txt)
corpus.txt[[2]]$content[1:3] # Examine the first 3 lines of the "ovid.txt" corpus
class(corpus.txt)
corpus.txt[[1]]$content # Displays content of loremipsum.txt
corpus.txt[[1]]$meta # Editable Metadata
corpus.txt[[1]]$meta$author <- "Ovid"
l
l
# Google Trends
rm(list=ls()); cat("\014")  # Clear all
library(readr)
library(readr)
installed.packages(readr)
installed.packages("readr")
library(readr)
# Google Trends
rm(list=ls()); cat("\014")  # Clear all
library(readr)
library(readr)
# Google Trends
rm(list=ls()); cat("\014")  # Clear all
install.packages("C:/Users/Denny/Downloads/readr_1.1.1.zip", repos = NULL, type = "win.binary")
# Google Trends
rm(list=ls()); cat("\014")  # Clear all
library(readr)
library(readr)
library(readr)
install.packages("C:/Users/Denny/Downloads/readr_1.1.1.zip", repos = NULL, type = "win.binary")
library(readr)
install.packages("C:/Users/Denny/Downloads/readr_1.1.1 (1).zip", repos = NULL, type = "win.binary")
# Read csv file
GT.Data <- read.csv(paste0('Data/', 'geoMap.csv'),
stringsAsFactors = FALSE,
skip = 2,
blank.lines.skip = TRUE,
header = T)
# Google Trends
rm(list=ls()); cat("\014")  # Clear all
library(readr)
install.packages("C:/Users/Denny/Downloads/readr_1.1.0.tar.gz", repos = NULL, type = "source")
library(readr)
install.packages("C:/Users/Denny/Downloads/readr_1.0.0.tar.gz", repos = NULL, type = "source")
# Google Trends
rm(list=ls()); cat("\014")  # Clear all
library(readr)
install.packages("C:/Users/Denny/Downloads/readr_1.1.1.zip", repos = NULL, type = "win.binary")
# Q6: Create a Bar Plot of GG & GB values for each state.
library(ggplot2)
library(reshape2)
GT.Data.m <- melt(GT.Data, id.vars='Region')  # Melting data  usgin melting function
ggplot(GT.Data.m, aes(Region, value)) +
geom_bar(aes(fill = variable), width = 0.7,
position = position_dodge(width=0.7),
stat="identity") + theme(legend.position="top",
legend.title = element_blank(),
axis.text.x=element_text(angle=60, hjust=1),
axis.title.y=element_text())     # Grouped Bar plot by Retion
# Google Trends
rm(list=ls()); cat("\014")  # Clear all
library(readr)
# Read csv file
GT.Data <- read.csv(paste0('Data/', 'geoMap.csv'),
stringsAsFactors = FALSE,
skip = 2,
blank.lines.skip = TRUE,
header = T)
install.packages(readr)
install.packages("readr")
library(readr)
# Read csv file
GT.Data <- read.csv(paste0('Data/', 'geoMap.csv'),
stringsAsFactors = FALSE,
skip = 2,
blank.lines.skip = TRUE,
header = T)
# Read csv file
GT.Data <- read.csv(paste0('Data/', 'geoMap.csv'),
stringsAsFactors = FALSE,
skip = 2,
blank.lines.skip = TRUE,
header = T)
# Read csv file
GT.Data <- read.csv(paste0("Data/", "geoMap.csv"),
stringsAsFactors = FALSE,
skip = 2,
blank.lines.skip = TRUE,
header = T)
read.csv()
# Google Trends
rm(list=ls()); cat("\014")  # Clear all
library(readr)
# Read csv file
GT.Data <- read.csv(paste0('Data/', 'geoMap.csv'),
stringsAsFactors = FALSE,
skip = 2,
blank.lines.skip = TRUE,
header = T)
colnames(GT.Data) <- c("Region", "GB", "GG")
GT.Data[1:5,]
getwd()
setwd(c:/users/denny/desktop/google trands)
setwd("c:/users/denny/desktop/google trands"")
getwd()
d
# Google Trends
rm(list=ls()); cat("\014")  # Clear all
getwd()
setwd(c:/users/denny/desktop/)
setwd("c:/users/denny/desktop")
getwd()
# Read csv file
GT.Data <- read.csv(paste0('Data/', 'geoMap.csv'),
stringsAsFactors = FALSE,
skip = 2,
blank.lines.skip = TRUE,
header = T)
setwd("c:/users/denny/desktop/google trands")
setwd("c:/users/denny/desktop/google trends")
getwd()
# Read csv file
GT.Data <- read.csv(paste0('Data/', 'geoMap.csv'),
stringsAsFactors = FALSE,
skip = 2,
blank.lines.skip = TRUE,
header = T)
colnames(GT.Data) <- c("Region", "GB", "GG")
GT.Data[1:5,]
# Covert to numeric values
zGB <- as.numeric(GT.Data$GB)
zGG <- as.numeric(GT.Data$GG)
# Place back to dataframe
GT.Data$GB <- zGB
GT.Data$GG <- zGG
# Find NA and replace with zero
ix1 <- which(is.na(GT.Data$GB))
GT.Data$GB[ix1] <- 0
ix2 <- which(is.na(GT.Data$GG))
GT.Data$GG[ix2] <- 0
# Q2: For How Many States GB > GG?
# Ans: 46
nrow(subset(GT.Data, GT.Data$GB > GT.Data$GG))
# Q3: Find any states where GG+10 > GB
# Ans: only Washington state
subset(GT.Data, GT.Data$GG+10 > GT.Data$GB)
# Q4: What is the % of states for which GG+10 > GB?
# Ans: 0.02173913
nrow(subset(GT.Data, GT.Data$GG+10 > GT.Data$GB))/nrow(GT.Data)
# Q5: What is the ratio GG/GB for the state of New Hampshire?
# Ans: 0.5
gg.new.hampshire <- GT.Data$GG[GT.Data$Region == "New Hampshire"]
gb.new.hampshire <- GT.Data$GB[GT.Data$Region == "New Hampshire"]
ratio <- gg.new.hampshire/gb.new.hampshire
ratio
# Q6: Create a Bar Plot of GG & GB values for each state.
library(ggplot2)
library(reshape2)
GT.Data.m <- melt(GT.Data, id.vars='Region')  # Melting data  usgin melting function
ggplot(GT.Data.m, aes(Region, value)) +
geom_bar(aes(fill = variable), width = 0.7,
position = position_dodge(width=0.7),
stat="identity") + theme(legend.position="top",
legend.title = element_blank(),
axis.text.x=element_text(angle=60, hjust=1),
axis.title.y=element_text())     # Grouped Bar plot by Retion
create RSA key
